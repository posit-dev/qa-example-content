# Combined Dockerfile for Positron with Python/R environments, Playwright, and VNC/X11 support
FROM --platform=linux/arm64 ubuntu:24.04

# Set platform to arm64
ARG TARGETPLATFORM=linux/arm64

# Arguments
ARG TOKEN

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV HOME=/root
ENV PATH="${HOME}/.pyenv/bin:/opt/conda/bin:$PATH"
ENV ELECTRON_ARCH=arm64

# Install system dependencies, VNC server, and window manager
ADD deps/ubuntu2404_packages_arm64.txt /tmp/apt_packages.txt
RUN apt-get update && apt-get install -y $(cat /tmp/apt_packages.txt) \
	&& apt-get clean \
	&& rm -rf /var/lib/apt/lists/* \
	&& rm -f /tmp/apt_packages.txt

# Create a non-root user for Positron and general use
RUN useradd --create-home --shell /bin/bash -G sudo runner && \
	echo "runner ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Install Node.js and npm
RUN curl -fsSL https://nodejs.org/dist/v22.15.1/node-v22.15.1-linux-arm64.tar.xz -o /tmp/node.tar.xz && \
	tar -xJf /tmp/node.tar.xz -C /usr/local --strip-components=1 && \
	rm /tmp/node.tar.xz && \
	ln -sf /usr/local/bin/node /usr/bin/node && \
	ln -sf /usr/local/bin/npm /usr/bin/npm


# Verify Node.js
RUN node -v && npm -v

# Global npm deps
RUN npm install -g node-gyp npm-run-all yarn

# xvfb init script
COPY deps/xvfb.init /etc/init.d/xvfb
RUN chmod +x /etc/init.d/xvfb && sudo update-rc.d xvfb defaults

# Quarto
RUN curl -LO https://quarto.org/download/latest/quarto-linux-arm64.deb && \
	sudo dpkg -i quarto-linux-arm64.deb && rm quarto-linux-arm64.deb

# Conda
RUN wget -O Miniforge3.sh "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh" && \
	bash Miniforge3.sh -b -p "/opt/conda" && rm Miniforge3.sh && \
	echo "source \"/opt/conda/etc/profile.d/conda.sh\"" >> ~/.bashrc

RUN /bin/bash -c "source /opt/conda/etc/profile.d/conda.sh && conda init bash"

# Python 3.12.x
RUN sudo apt-get update && sudo apt-get install -y software-properties-common && \
	sudo add-apt-repository ppa:deadsnakes/ppa && \
	sudo apt-get update && sudo apt-get install -y python3.12 python3.12-dev python3.12-venv && \
	sudo rm -rf /var/lib/apt/lists/* && \
	sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.12 1 && \
	sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1 && \
	curl -sS https://bootstrap.pypa.io/get-pip.py | python && \
	python -m pip install --upgrade pip setuptools wheel

# Rig and R
RUN curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-aarch64-latest.tar.gz | tar xz -C /usr/local
RUN rig add 4.4.0

# Install R 4.4.2 without packages
RUN rig add 4.4.2 && rig default 4.4.0

# Switch to non-root user
USER runner
ENV HOME=/home/runner
WORKDIR /home/runner

# Install TinyTeX manually for ARM64
RUN perl -mFile::Find /dev/null && \
    wget -qO- "https://yihui.org/tinytex/install-bin-unix.sh" | sh && \
    echo 'PATH="$PATH:$HOME/.TinyTeX/bin/aarch64-linux"' >> ~/.bashrc

# uv and dependencies
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    python -m venv $HOME/.venv && \
    $HOME/.venv/bin/python -m pip install --upgrade pip && \
    curl -O https://raw.githubusercontent.com/posit-dev/qa-example-content/main/requirements.txt && \
    $HOME/.local/bin/uv pip install --python $HOME/.venv/bin/python --break-system-packages -r requirements.txt && \
    $HOME/.venv/bin/python -m pip list

ENV PATH="/home/runner/.venv/bin:/home/runner/.local/bin:$PATH"

# Configure R for runner user
RUN echo 'options(\n  repos = c(RSPM = "https://packagemanager.posit.co/cran/__linux__/noble/latest"),\n  HTTPUserAgent = sprintf("R/%s (ubuntu-2404)", getRversion())\n)' > ~/.Rprofile

# Install R packages for 4.4.0 only
RUN sudo rig default 4.4.0 && \
    git clone --depth 1 https://github.com/posit-dev/qa-example-content.git /tmp/qa-example-content && \
    Rscript -e "if (!requireNamespace('pak', quietly = TRUE)) install.packages('pak', repos = 'https://packagemanager.posit.co/cran/__linux__/noble/latest')" && \
    cd /tmp/qa-example-content && \
    Rscript -e "options(repos = c(RSPM = 'https://packagemanager.posit.co/cran/__linux__/noble/latest'), pak.no_build_vignettes = TRUE, pkg.sysreqs = FALSE, pkg.install.extra = c('--no-multiarch')); pak::local_install_dev_deps(ask = FALSE, dependencies = TRUE)"

# pyenv and alt Python
RUN curl https://pyenv.run | bash
RUN export PATH="$HOME/.pyenv/bin:$PATH" && \
	eval "$(pyenv init --path)" && \
	eval "$(pyenv virtualenv-init -)" && \
	pyenv install 3.13.0 && \
	pyenv global 3.13.0 && \
	python -m pip install --upgrade pip ipykernel && \
	pyenv global system

# Hidden Python
RUN mkdir -p ${HOME}/scratch && \
	/bin/bash -c "source /opt/conda/etc/profile.d/conda.sh && \
	conda create -y -p \"${HOME}/scratch/python-env\" python=3.12.10 pip setuptools && \
	conda activate \"${HOME}/scratch/python-env\" && \
	python -c \"import sys; print(f'Python {sys.version} is working!')\""

# Hidden R
RUN mkdir -p ${HOME}/scratch/R-4.4.1 && \
	cd ${HOME}/scratch && \
	sudo curl -fLO "https://cdn.posit.co/r/ubuntu-2404/R-4.4.1-ubuntu-2404-arm64.tar.gz" && \
	sudo tar -xzf R-4.4.1-ubuntu-2404-arm64.tar.gz -C R-4.4.1 --strip-components=1 && \
	sudo sed -i "s|/opt/R/4.4.1|${HOME}/scratch/R-4.4.1|g" ${HOME}/scratch/R-4.4.1/bin/R && \
	sudo sed -i "s|/opt/R/4.4.1|${HOME}/scratch/R-4.4.1|g" ${HOME}/scratch/R-4.4.1/lib/R/etc/Renviron && \
	sudo chmod +x ${HOME}/scratch/R-4.4.1/bin/R

# Positron License
WORKDIR /usr/src
RUN sudo chown -R runner:runner /usr/src && \
	mkdir positron-license && \
    cd positron-license && \
    git clone https://${TOKEN}@github.com/posit-dev/positron-license.git . && \
    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly && \
    export PATH="/home/runner/.cargo/bin:${PATH}" && \
    cd pdol && \
    cargo build && \
    mkdir -p target/debug/

# Playwright/Electron/Positron
ENV PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 \
    ELECTRON_SKIP_BINARY_DOWNLOAD=1 \
    NODE_OPTIONS="--max-old-space-size=4095"

WORKDIR /usr/src
RUN git clone https://github.com/posit-dev/positron.git && \
	cd positron
WORKDIR /usr/src/positron
RUN npm ci --fetch-timeout 120000 && \
	npm --prefix test/e2e ci && \
	npm exec -- npm-run-all -lp compile "electron arm64" playwright-install

RUN ELECTRON_ROOT=.build/electron && \
	sudo chown root $ELECTRON_ROOT/chrome-sandbox && \
	sudo chmod 4755 $ELECTRON_ROOT/chrome-sandbox

RUN npm run prelaunch

# Expose ports
EXPOSE 8080 5900 9323

# Positron Test Environment Vars
ENV POSITRON_PY_VER_SEL="3.12.10 (Venv: .venv)" \
    POSITRON_R_VER_SEL=4.4.0 \
    POSITRON_PY_ALT_VER_SEL="3.13.0 (Pyenv)" \
    POSITRON_R_ALT_VER_SEL=4.4.2 \
    POSITRON_HIDDEN_PY="3.12.10 (Conda)" \
    POSITRON_HIDDEN_R=4.4.1

# Runtime startup: Xvfb, Fluxbox, VNC, Playwright
COPY deps/startup.sh /home/runner/startup.sh
RUN sudo chmod +x /home/runner/startup.sh
CMD ["/home/runner/startup.sh"]

